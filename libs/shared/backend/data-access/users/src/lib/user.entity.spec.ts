import { User } from './user.entity';

describe('UserEntity', () => {
  it('should be defined', () => {
    expect(new User()).toBeDefined();
  });

  it('should create a user with default values', () => {
    const user = new User();
    expect(user.id).toBeUndefined(); // id will be generated by the database
    expect(user.username).toBeUndefined();
    expect(user.email).toBeUndefined();
    expect(user.isActive).toBeUndefined();
    expect(user.password).toBeUndefined();
    expect(user.accessToken).toBeUndefined();
    expect(user.refreshToken).toBeUndefined();
    expect(user.createdAt).toBeInstanceOf(Date);
    expect(user.updatedAt).toBeInstanceOf(Date);
  });

  it('should create a user with provided values', () => {
    const data = {
      username: 'testuser',
      email: 'test@example.com',
      isActive: true,
      password: 'password',
      accessToken: 'accessToken',
      refreshToken: 'refreshToken',
      createdAt: new Date('2023-01-01'),
      updatedAt: new Date('2023-01-02'),
    };
    const user = new User(data);
    expect(user.id).toBeUndefined(); // id will be generated by the database
    expect(user.username).toBe(data.username);
    expect(user.email).toBe(data.email);
    expect(user.isActive).toBe(data.isActive);
    expect(user.password).toBe(data.password);
    expect(user.accessToken).toBe(data.accessToken);
    expect(user.refreshToken).toBe(data.refreshToken);
    expect(user.createdAt).toBe(data.createdAt);
    expect(user.updatedAt).toBe(data.updatedAt);
  });

  it('should update the updatedAt property on update', () => {
    const user = new User();
    const initialUpdatedAt = user.updatedAt;
    user.updatedAt = new Date('2023-01-01');
    expect(user.updatedAt).not.toBe(initialUpdatedAt);
  });
});
