import { Role } from './role.entity';
import { IUser, IPermission } from '@portfolio/common-models';

describe('RoleEntity', () => {
  it('should be defined', () => {
    expect(new Role()).toBeDefined();
  });

  it('should create a role with default values', () => {
    const role = new Role();
    expect(role.id).toBeUndefined(); // id will be generated by the database
    expect(role.name).toBeUndefined();
    expect(role.description).toBeUndefined();
    expect(role.users).toBeUndefined();
    expect(role.permissions).toBeUndefined();
    expect(role.createdAt).toBeUndefined();
    expect(role.updatedAt).toBeUndefined();
  });

  it('should create a role with provided values', () => {
    const data = {
      id: '1',
      name: 'Admin',
      description: 'Administrator role',
      users: [] as IUser[],
      permissions: [] as IPermission[],
      createdAt: new Date('2023-01-01'),
      updatedAt: new Date('2023-01-02'),
    };
    const role = new Role();
    Object.assign(role, data);
    expect(role.id).toBe(data.id);
    expect(role.name).toBe(data.name);
    expect(role.description).toBe(data.description);
    expect(role.users).toBe(data.users);
    expect(role.permissions).toBe(data.permissions);
    expect(role.createdAt).toBe(data.createdAt);
    expect(role.updatedAt).toBe(data.updatedAt);
  });

  it('should update the updatedAt property on update', () => {
    const role = new Role();
    const initialUpdatedAt = role.updatedAt;
    role.updatedAt = new Date('2023-01-01');
    expect(role.updatedAt).not.toBe(initialUpdatedAt);
  });
});
